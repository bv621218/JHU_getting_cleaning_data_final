128*4
install.packages(c("callr", "checkpoint", "citr", "clipr", "curl", "doParallel", "DT", "emmeans", "foreach", "foreign", "httr", "iterators", "lava", "lpSolve", "nlme", "openssl", "pkgbuild", "processx", "Rcpp", "rsconnect", "RSQLite", "testthat", "tinytex", "xml2"))
install.packages("httr")
install.packages(c("knitr", "markdown", "modelr", "xml2"))
library(devtools)
find_rtools()
?find_rtools
install.packages("ggplot2")
install.packages(c("citr", "lpSolve", "rgl", "RgoogleMaps"))
install.packages(c("bookdown", "chron", "geometry", "hms", "rmarkdown", "rpart.plot", "sys", "xfun"))
install.packages("pkgbuild")
install.packages(c("geometry", "RODBC", "whisker"))
install.packages(c("checkpoint", "devtools", "httpuv", "languageserver"))
install.packages(c("backports", "bookdown", "callr", "collections", "curl", "data.table", "devtools", "digest", "DT", "ellipsis", "emmeans", "htmlTable", "htmltools", "htmlwidgets", "knitr", "languageserver", "later", "lintr", "maptools", "mgcv", "pkgbuild", "pkgconfig", "pls", "promises", "recipes", "rgdal", "RJSONIO", "rmarkdown", "sparklyr", "tidyr", "tinytex", "TTR", "xfun"))
install.packages(c("collections", "covr", "data.table", "digest", "KernSmooth", "purrr", "shiny", "stringdist", "styler"))
install.packages(c("collections", "ddalpha", "emmeans", "hms", "jpeg", "languageserver", "mgcv", "rgdal", "rlang", "slam"))
install.packages("tinytex")
install.packages(c("collections", "prodlim", "R.oo"))
install.packages(c("BH", "broom", "callr", "cli", "data.table", "DBI", "geometry", "htmlTable", "IRkernel", "nlme", "odbc", "plyr", "R.utils", "rattle", "repr", "RgoogleMaps", "rmarkdown", "RMySQL", "rsconnect", "RSQLite", "tinytex", "TTR", "xptr"))
install.packages("nlme")
install.packages(c("BH", "foreign", "mime", "nlme", "recipes", "RSQLite", "vctrs"))
install.packages("nlme")
install.packages(c("bibtex", "boot", "DT", "enc", "foreign", "MASS", "memisc", "nlme", "pillar", "slam"))
install.packages("nlme")
install.packages(c("bibtex", "nlme"))
install.packages(c("BH", "bit", "bookdown", "caret", "caTools", "checkpoint", "cli", "ddalpha", "fansi", "gistr", "hms", "languageserver", "ModelMetrics", "mvtnorm", "nlme", "odbc", "prettyunits", "RCurl", "recipes", "RgoogleMaps", "RJSONIO", "RSQLite", "shinyjs", "sparklyr", "SQUAREM", "stringi", "tinytex", "xfun", "zoo"))
install.packages(c("nlme", "RCurl"))
install.packages(c("blob", "broom", "callr", "dplyr", "emmeans", "farver", "foreign", "gh", "knitr", "lpSolve", "nlme", "prettyunits", "RCurl", "repr", "RgoogleMaps", "rlang", "rmarkdown", "survey", "swirl", "tidyr", "tidyselect", "vctrs", "XML", "xts", "yaml"))
install.packages(c("checkmate", "chron", "collections", "DT", "foreach", "hexbin", "Hmisc", "jsonlite", "knitr", "mime", "nlme", "processx", "RcppProgress", "RMySQL", "rstudioapi", "sfsmisc"))
install.packages(c("bit", "callr", "devtools", "digest", "DRR", "lattice", "lintr", "memisc", "nlme", "ps", "R.methodsS3", "remotes", "rgl", "RgoogleMaps", "stringi", "styler", "xlsx"))
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
install.packages(c("checkpoint", "digest", "modelr", "nlme", "rgl", "sp", "SQUAREM", "styler", "vctrs"))
install.packages(c("nlme", "vctrs"))
install.packages(c("languageserver", "manipulateWidget", "mvtnorm", "nlme", "nnet", "tinytex", "uuid"))
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
today()
this_day<- today(
)
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment<- now()
now
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date<- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd(192012)
ymd("192012")
ymd("1920-1-2")
dt1
yms_hms(dt1)
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours= 8, minutes= 34 , seconds = 55)
this_moment
this_moment<- update(this_moment, hours = 14)
this_moment<- update(this_moment, hours = 10, minutes= 16, seconds = 0)
this_moment
nyc<- now(tzone = "America/New_York")
nyc
depart<- nyc + days(2)
depart
depart<- update(depart, hours = 17, minutes = 34)
depart
arrive<- depart + hours(15)+minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive<- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval()
?interval
how_long<- interval(last_time, arrive)
as.period(how_long)
stopwatch
stopwatch()
install.packages(c("broom", "cli", "nlme", "sp", "xlsx"))
print("Hello")
R.Version()
df<- load(cars)
df<- load("cars")
cars
df<- cars
Viwe(cars)
Viwe(df)
View(df)
?gather
library(dplyr)
?gather
library(tidyr)
?gather
?pivot_longer
exit()
e()
q()
library(DBI)
library(RMySQL)
ucscDb<- dbConnect(MySQL(), host = "genome",
host = "genome-mysql.cse.ucsc.edu")
result<- dbGetQuery(ucscDb, "show databases;")
?`dbConnect,MySQLConnection-method`
ucscDb<- RMySQL::dbConnect(MySQL(), host = "genome",
host = "genome-mysql.cse.ucsc.edu")
?dbConnect
ucscDb<- RMySQL::dbConnect(MySQL(), host = "genome",
host = "genome-mysql.soe.ucsc.edu")
ucscDb<- RMySQL::dbConnect(MySQL(), host = "genome",
host = genome-mysql.soe.ucsc.edu)
ucscDb<- RMySQL::dbConnect(MySQL(), host = "genome",
host = genome-mysql.soe.ucsc.edu -A -P 3306)
ucscDb<- RMySQL::dbConnect(MySQL(), host = "genome",
host = "genome-mysql.soe.ucsc.edu -A -P 3306")
mychannel <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
ucscDb<- RMySQL::dbConnect(MySQL(), host = "genome",
host = "genome-mysql.ucsc.edu -A -P 3306")
ucscDb<- RMySQL::dbConnect(MySQL(), host = "genome",
host = "genome-mysql.ucsc.edu")
ucscDb<- RMySQL::dbConnect(MySQL(), host = "genome",
host = "genome-mysql.cse.ucsc.edu")
ucscDb<- RMySQL::dbConnect(MySQL(), host = "genome",host = "genome-mysql.cse.ucsc.edu")
ucscDb<- dbConnectMySQL(), host = "genome",host = "genome-mysql.cse.ucsc.edu")
ucscDb<- dbConnect(MySQL(), host = "genome",host = "genome-mysql.cse.ucsc.edu")
ucscDb<- dbConnect(MySQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
result<- dbGetQuery(ucscDb, "show databases;")
results
result
library(jsonlite)
library(httpuv)
library(httr)
oauth_endpoints("github")
myapp<- oauth_app(appname = "bv_coursera",
key = "b2d94795de897c9da54b",
secret = "bdff3c82c4fd756c87166520f6fece233a85fe43" )
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(jsonlite)
library(httpuv)
library(httr)
oauth_endpoints("github")
myapp<- oauth_app(appname = "bv_coursera",
key = "b2d94795de897c9da54b",
secret = "bdff3c82c4fd756c87166520f6fece233a85fe43" )
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken<- config(token = github_token)
req<- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
json1<- content(req)
gitDF<- jsonlite::fromJSON(jsonlite::toJson(json1))
gitDF[gitDF$full_name = "jtleek/datasharing", "created_at"]
library(jsonlite)
library(httpuv)
library(httr)
oauth_endpoints("github")
myapp<- oauth_app(appname = "bv_coursera",
key = "b2d94795de897c9da54b",
secret = "bdff3c82c4fd756c87166520f6fece233a85fe43" )
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken<- config(token = github_token)
req<- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
json1<- content(req)
gitDF<- jsonlite::fromJSON(jsonlite::toJson(json1))
gitDF[gitDF$full_name = "jtleek/datasharing", "created_at"]
library(jsonlite)
library(httpuv)
library(httr)
oauth_endpoints("github")
myapp<- oauth_app(appname = "bv_coursera",
key = "b2d94795de897c9da54b",
secret = "bdff3c82c4fd756c87166520f6fece233a85fe43" )
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken<- config(token = github_token)
req<- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
json1<- content(req)
gitDF<- jsonlite::fromJSON(jsonlite::toJSON(json1))
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode<- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode(20)), nchar(htmlCode[30]), nchar(htmlCode[100]))
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines<- readLines(url, n=10)
d<- read.fwf(url, header= F, skip = 4)
sum(d[,4])
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines<- readLines(url, n=10)
w<- c(1,9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
d<- read.fwf(url,w, header= F, skip = 4)
sum(d[,4])
View(d)
install.packages(c("covr", "dplyr", "lifecycle", "nlme", "quantmod", "survival"))
install.packages(c("nlme", "RJDBC", "vctrs", "xml2"))
library(odbc)
mydb <- dbConnect(odbc::odbc(), "MySQL Server")
library(odbc)
mydb <- dbConnect(odbc::odbc(), "MySQLServer")
library(odbc)
mydb <- dbConnect(odbc::odbc(), "MySQLr")
library(odbc)
mydb <- dbConnect(odbc::odbc(), "MySQL")
install.packages(c("nlme", "roxygen2", "shiny"))
setwd("C:/Users/bryan/OneDrive/Documents/Docs/data_clean/JHU_GettingAndCleaningData_FinalProject")
fileName<- "JHU_GACD_FinalProject_Raw.zip"
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
setwd("./UCI HAR Dataset")
source('~/GitHub/JHU_getting_cleaning_data_final/run_analysis.R')
#change this file path to reflect your directory path.
wd1<- "C:/Users/bryan/OneDrive/Documents/GitHub/JHU_getting_cleaning_data_final"
setwd("wd1")
#change this file path to reflect your directory path.
wd1<- "C:/Users/bryan/OneDrive/Documents/GitHub/JHU_getting_cleaning_data_final"
setwd(wd1)
source('~/GitHub/JHU_getting_cleaning_data_final/run_analysis.R')
source('~/GitHub/JHU_getting_cleaning_data_final/run_analysis.R')
tidyData<- subsetData %>%
group_by(subject, activity)%>%
summarise_all(list(mean= mean)
)
View(tidyData)
x<- readtable(paste0(wd1, "/tidy_data.txt"))
x<- read.table(paste0(wd1, "/tidy_data.txt"))
View(x)
source('~/GitHub/JHU_getting_cleaning_data_final/run_analysis.R')
)
source('~/GitHub/JHU_getting_cleaning_data_final/run_analysis.R')
source('~/GitHub/JHU_getting_cleaning_data_final/run_analysis.R')
source('~/GitHub/JHU_getting_cleaning_data_final/run_analysis.R')
